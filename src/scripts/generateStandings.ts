import fs from 'fs'
import resultsData from '../data/results'
import trackData from '../data/tracks.json'
import { type RacerResults, type TrackName, type SeasonName, type Tracks } from '../types'

type GeneratedRaceStandings = {
  [index: string]: number
}

type GeneratedStandings = {
  [index: string]: GeneratedRaceStandings | null
}

const autoGeneratedSeasons = ['s4']
const topTenPoints = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
const topTwentyPoints = [35, 29, 24, 21, 19, 17, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
const pointsScheme = { s1: topTenPoints, s2: topTenPoints, s3: topTenPoints, s4: topTwentyPoints }

const calculateStandings = (season: SeasonName) => {
  const seasonRaces = Object.keys(resultsData[season])

  // Compile initial race scores into standings objects
  const points = seasonRaces.reduce((racesObj: GeneratedStandings, race: string) => {
    const raceResults = (resultsData[season] as RacerResults)[race as TrackName]
    const noPointsRace = (trackData as Tracks)[race as TrackName].noPoints

    const points = raceResults
      ? Object.keys(raceResults.results).reduce(
          (obj: GeneratedRaceStandings, item: string, currentIndex) => {
            const cumulativePoints =
              (pointsScheme[season][currentIndex] ?? 0) +
              (raceResults.fastestLap.racerId === item ? 1 : 0)

            return (obj[item] = noPointsRace ? 0 : cumulativePoints), obj
          },
          {}
        )
      : null

    return (racesObj[race] = points), racesObj
  }, {})

  // Add the points for each racer cumulatively, and reorder
  const raceKeys = Object.keys(points)
  raceKeys.forEach((race, index) => {
    if (index === 0 || points[race] === null) {
      return
    }

    const racePoints = points[race] as GeneratedRaceStandings
    const previousRacePoints = points[raceKeys[index - 1]] as GeneratedRaceStandings
    Object.keys(racePoints).forEach((racer) => {
      racePoints[racer] += previousRacePoints[racer] ?? 0
    })

    points[race] = Object.entries(racePoints)
      .sort(([, a], [, b]) => b - a)
      .reduce((r, [k, v]) => ({ ...r, [k]: v }), {})
  })

  return points
}

autoGeneratedSeasons.forEach((season) => {
  const jsonData = JSON.stringify(calculateStandings(season as SeasonName))

  const filePath = `src/data/standings/${season}.json`
  try {
    fs.writeFileSync(filePath, jsonData, { flag: 'w' })
    console.log(`${season} standings data saved to file successfully.`)
  } catch (error) {
    console.error('Error writing JSON data to file:', error)
  }
})
